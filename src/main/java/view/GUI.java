package view;

import JPA2.FinalClass;
import JPA2.ProposedSubject;
import JPA2.User;
import JPA2.UserType;
import JPA2.Vote;
import control.Controller;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import utilities.AcceptanceProtocol;

/**
 *
 * @author smarandadungeanu
 */
public class GUI extends javax.swing.JFrame
{

    Controller control;
    List<ProposedSubject> subjectsToBeDisplayed;
    int roundNumber;
    String[] subjectsTableColumnNames;
    List<Boolean> isStudentCheckBoxEditable;

    public GUI()
    {
        initComponents();
        jMenuRound1.setVisible(false);
        jMenuRound2.setVisible(false);
        jMenuProposeSubject.setVisible(false);
        jMenuEstablishClasses.setVisible(false);
        jMenuLogout.setVisible(false);
        jPanelAddProposedSubject.setVisible(false);
        jPanelRound1.setVisible(false);
        jPanelPoll.setVisible(false);
        jPanelHelp.setVisible(false);
        jPanelChooseProposedSubjectsForRound1.setVisible(false);
        jPanelMain.setVisible(false);
        jPanelEstablishSubjects.setVisible(false);
        jTextFieldUsername.requestFocus();
        control = new Controller();
        roundNumber = 0;
        isStudentCheckBoxEditable = new ArrayList();
        subjectsTableColumnNames = new String[]
        {
            "Name", "Poll", "Teachers", "Description"
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jComboBox5 = new javax.swing.JComboBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanelLogin = new javax.swing.JPanel();
        jTextFieldUsername = new javax.swing.JTextField();
        jTextFieldPassword = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonLogin = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabelLoginError = new javax.swing.JLabel();
        jPanelMain = new javax.swing.JPanel();
        jLabelWelcome = new javax.swing.JLabel();
        jButtonSelectSubjectsToVote = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSubjects = new javax.swing.JTable();
        jPanelRound1 = new javax.swing.JPanel();
        jLabelFirstPriorityA = new javax.swing.JLabel();
        jLabelSecondPriorityA = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        jComboBox4 = new javax.swing.JComboBox();
        jButtonSubmitRound1 = new javax.swing.JButton();
        jLabelError = new javax.swing.JLabel();
        jLabelRoundTitle = new javax.swing.JLabel();
        jLabelPollA = new javax.swing.JLabel();
        jLabelPollB = new javax.swing.JLabel();
        jLabelFirstPriorityB = new javax.swing.JLabel();
        jLabelSecondPriorityB = new javax.swing.JLabel();
        jButtonBackRound1 = new javax.swing.JButton();
        jPanelHelp = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButtonBack = new javax.swing.JButton();
        jPanelPoll = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListPollA = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListPollB = new javax.swing.JList();
        jLabelA = new javax.swing.JLabel();
        jLabelB = new javax.swing.JLabel();
        jButtonSubmit = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableUnsatisfiedStudents = new javax.swing.JTable();
        jLabelLogPool = new javax.swing.JLabel();
        jPanelChooseProposedSubjectsForRound1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListAllProposedSubjects = new javax.swing.JList();
        jButtonSubmitProposedSubjectsForRound1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabelFeedbackChooseProposedSubjectsForRound1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanelAddProposedSubject = new javax.swing.JPanel();
        jLabelName = new javax.swing.JLabel();
        jLabelDescription = new javax.swing.JLabel();
        jTextFieldProposedSubjectName = new javax.swing.JTextField();
        jTextFieldProposedSubjectDescription = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jButtonProposeSubject = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListProposedTeachers = new javax.swing.JList();
        jLabelTeachers = new javax.swing.JLabel();
        jPanelEstablishSubjects = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableRound2Votes = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jListPoolAEstablishClasses = new javax.swing.JList();
        jScrollPane9 = new javax.swing.JScrollPane();
        jListPoolBEstablishClasses = new javax.swing.JList();
        jScrollPane10 = new javax.swing.JScrollPane();
        jListClasses = new javax.swing.JList();
        jLabel10 = new javax.swing.JLabel();
        jButtonSubmitClass = new javax.swing.JButton();
        jLabelNewClassError = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jListStudentsForClass = new javax.swing.JList();
        jLabel11 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuProposeSubject = new javax.swing.JMenu();
        jMenuRound1 = new javax.swing.JMenu();
        jMenuRound2 = new javax.swing.JMenu();
        jMenuEstablishClasses = new javax.swing.JMenu();
        jMenuLogout = new javax.swing.JMenu();
        jMenuHelp = new javax.swing.JMenu();

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        jPanelLogin.setBackground(new java.awt.Color(255, 255, 255));
        jPanelLogin.setMaximumSize(new java.awt.Dimension(800, 550));
        jPanelLogin.setPreferredSize(new java.awt.Dimension(800, 550));

        jTextFieldPassword.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jTextFieldPasswordKeyPressed(evt);
            }
        });

        jLabel1.setText("Username:");

        jLabel2.setText("Password:");

        jButtonLogin.setText("Log in");
        jButtonLogin.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonLoginActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Exit");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonCancelActionPerformed(evt);
            }
        });

        jLabelLoginError.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout jPanelLoginLayout = new javax.swing.GroupLayout(jPanelLogin);
        jPanelLogin.setLayout(jPanelLoginLayout);
        jPanelLoginLayout.setHorizontalGroup(
            jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLoginLayout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                            .addComponent(jTextFieldPassword)))
                    .addComponent(jLabelLoginError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(232, 232, 232))
        );
        jPanelLoginLayout.setVerticalGroup(
            jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLoginLayout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(jPanelLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLogin)
                    .addComponent(jButtonCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 205, Short.MAX_VALUE)
                .addComponent(jLabelLoginError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        jPanelMain.setBackground(new java.awt.Color(255, 255, 255));
        jPanelMain.setMaximumSize(new java.awt.Dimension(800, 550));
        jPanelMain.setPreferredSize(new java.awt.Dimension(800, 550));

        jLabelWelcome.setText("Welcome text");

        jButtonSelectSubjectsToVote.setText("Select subjects to vote");
        jButtonSelectSubjectsToVote.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSelectSubjectsToVoteActionPerformed(evt);
            }
        });

        jTableSubjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title", "Poll", "Teachers", "Description"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableSubjects);

        javax.swing.GroupLayout jPanelMainLayout = new javax.swing.GroupLayout(jPanelMain);
        jPanelMain.setLayout(jPanelMainLayout);
        jPanelMainLayout.setHorizontalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                    .addComponent(jLabelWelcome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMainLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSelectSubjectsToVote)
                .addGap(327, 327, 327))
        );
        jPanelMainLayout.setVerticalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabelWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jButtonSelectSubjectsToVote)
                .addContainerGap())
        );

        jPanelRound1.setBackground(new java.awt.Color(255, 255, 255));
        jPanelRound1.setMaximumSize(new java.awt.Dimension(800, 550));
        jPanelRound1.setPreferredSize(new java.awt.Dimension(800, 550));

        jLabelFirstPriorityA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelFirstPriorityA.setText("Please choose two first priorities:");

        jLabelSecondPriorityA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSecondPriorityA.setText("Please choose two second priorities:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- no subject -" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- no subject -" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- no subject -" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox3ActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "- no subject -" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox4ActionPerformed(evt);
            }
        });

        jButtonSubmitRound1.setText("Submit");
        jButtonSubmitRound1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSubmitRound1ActionPerformed(evt);
            }
        });

        jLabelError.setForeground(new java.awt.Color(255, 0, 51));

        jLabelRoundTitle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelRoundTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRoundTitle.setText("Title");
        jLabelRoundTitle.setToolTipText("");

        jLabelPollA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPollA.setText("POOL A");

        jLabelPollB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelPollB.setText("POLL B");

        jLabelFirstPriorityB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelFirstPriorityB.setText("First Priority:");

        jLabelSecondPriorityB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSecondPriorityB.setText("Second Priority:");

        jButtonBackRound1.setText("Back");
        jButtonBackRound1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBackRound1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRound1Layout = new javax.swing.GroupLayout(jPanelRound1);
        jPanelRound1.setLayout(jPanelRound1Layout);
        jPanelRound1Layout.setHorizontalGroup(
            jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRound1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelRoundTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelRound1Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRound1Layout.createSequentialGroup()
                                .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanelRound1Layout.createSequentialGroup()
                                        .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabelFirstPriorityA, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                            .addComponent(jLabelPollA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                                        .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabelFirstPriorityB, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                            .addComponent(jLabelPollB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelRound1Layout.createSequentialGroup()
                                        .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabelSecondPriorityA, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jComboBox2, 0, 200, Short.MAX_VALUE)
                                            .addComponent(jLabelSecondPriorityB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(jLabelError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(99, 99, 99))
                            .addGroup(jPanelRound1Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jButtonBackRound1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSubmitRound1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(154, 154, 154)))))
                .addGap(30, 30, 30))
        );
        jPanelRound1Layout.setVerticalGroup(
            jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRound1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabelRoundTitle)
                .addGap(35, 35, 35)
                .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPollA)
                    .addComponent(jLabelPollB))
                .addGap(18, 18, 18)
                .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFirstPriorityA)
                    .addComponent(jLabelFirstPriorityB))
                .addGap(18, 18, 18)
                .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSecondPriorityA)
                    .addComponent(jLabelSecondPriorityB))
                .addGap(18, 18, 18)
                .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(147, 147, 147)
                .addGroup(jPanelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBackRound1)
                    .addComponent(jButtonSubmitRound1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addComponent(jLabelError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jPanelHelp.setBackground(new java.awt.Color(255, 255, 255));
        jPanelHelp.setMaximumSize(new java.awt.Dimension(800, 550));
        jPanelHelp.setMinimumSize(new java.awt.Dimension(800, 550));
        jPanelHelp.setPreferredSize(new java.awt.Dimension(800, 550));

        jLabel5.setText("Here you can find some instructions");

        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelHelpLayout = new javax.swing.GroupLayout(jPanelHelp);
        jPanelHelp.setLayout(jPanelHelpLayout);
        jPanelHelpLayout.setHorizontalGroup(
            jPanelHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHelpLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel5)
                .addContainerGap(594, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHelpLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonBack)
                .addGap(40, 40, 40))
        );
        jPanelHelpLayout.setVerticalGroup(
            jPanelHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHelpLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 434, Short.MAX_VALUE)
                .addComponent(jButtonBack)
                .addGap(34, 34, 34))
        );

        jPanelPoll.setBackground(new java.awt.Color(255, 255, 255));
        jPanelPoll.setMaximumSize(new java.awt.Dimension(800, 550));
        jPanelPoll.setPreferredSize(new java.awt.Dimension(800, 550));

        jListPollA.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListPollA.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jListPollAMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jListPollAMouseClicked(evt);
            }
        });
        jListPollA.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                jListPollAValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListPollA);

        jListPollB.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListPollB.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jListPollBMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jListPollBMouseClicked(evt);
            }
        });
        jListPollB.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                jListPollBValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListPollB);

        jLabelA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelA.setText("POOL A");

        jLabelB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelB.setText("POOL B");

        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSubmitActionPerformed(evt);
            }
        });

        jProgressBar1.setOrientation(1);
        jProgressBar1.setToolTipText("");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Top unsatisfied students:");

        jTableUnsatisfiedStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String []
            {
                "Name", "Choices", "Satisfaction"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTableUnsatisfiedStudents);

        jLabelLogPool.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanelPollLayout = new javax.swing.GroupLayout(jPanelPoll);
        jPanelPoll.setLayout(jPanelPollLayout);
        jPanelPollLayout.setHorizontalGroup(
            jPanelPollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPollLayout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelPollLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanelPollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelPollLayout.createSequentialGroup()
                        .addComponent(jLabelLogPool, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSubmit))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                    .addGroup(jPanelPollLayout.createSequentialGroup()
                        .addGroup(jPanelPollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelPollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(jLabelB, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                        .addGap(55, 55, 55)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );
        jPanelPollLayout.setVerticalGroup(
            jPanelPollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPollLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelA)
                    .addComponent(jLabelB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelPollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPollLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPollLayout.createSequentialGroup()
                        .addGroup(jPanelPollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addGap(37, 37, 37)))
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(jPanelPollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelLogPool, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        jPanelChooseProposedSubjectsForRound1.setBackground(new java.awt.Color(255, 255, 255));
        jPanelChooseProposedSubjectsForRound1.setMaximumSize(new java.awt.Dimension(800, 550));
        jPanelChooseProposedSubjectsForRound1.setMinimumSize(new java.awt.Dimension(800, 550));
        jPanelChooseProposedSubjectsForRound1.setPreferredSize(new java.awt.Dimension(800, 550));

        jListAllProposedSubjects.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Android", "Arduino", "C#", "Game design", "3D printer", "Artificial Inteligence" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jListAllProposedSubjects);

        jButtonSubmitProposedSubjectsForRound1.setText("Submit");
        jButtonSubmitProposedSubjectsForRound1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSubmitProposedSubjectsForRound1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Select proposed subjects for round 1 from the list:");

        jLabelFeedbackChooseProposedSubjectsForRound1.setForeground(new java.awt.Color(255, 0, 0));
        jLabelFeedbackChooseProposedSubjectsForRound1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Proposed subjects - Round 1");

        javax.swing.GroupLayout jPanelChooseProposedSubjectsForRound1Layout = new javax.swing.GroupLayout(jPanelChooseProposedSubjectsForRound1);
        jPanelChooseProposedSubjectsForRound1.setLayout(jPanelChooseProposedSubjectsForRound1Layout);
        jPanelChooseProposedSubjectsForRound1Layout.setHorizontalGroup(
            jPanelChooseProposedSubjectsForRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChooseProposedSubjectsForRound1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanelChooseProposedSubjectsForRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelChooseProposedSubjectsForRound1Layout.createSequentialGroup()
                        .addComponent(jLabelFeedbackChooseProposedSubjectsForRound1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSubmitProposedSubjectsForRound1)))
                .addGap(29, 29, 29))
        );
        jPanelChooseProposedSubjectsForRound1Layout.setVerticalGroup(
            jPanelChooseProposedSubjectsForRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelChooseProposedSubjectsForRound1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanelChooseProposedSubjectsForRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonSubmitProposedSubjectsForRound1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelFeedbackChooseProposedSubjectsForRound1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );

        jPanelAddProposedSubject.setBackground(new java.awt.Color(255, 255, 255));
        jPanelAddProposedSubject.setMaximumSize(new java.awt.Dimension(800, 550));
        jPanelAddProposedSubject.setMinimumSize(new java.awt.Dimension(800, 550));
        jPanelAddProposedSubject.setPreferredSize(new java.awt.Dimension(800, 550));

        jLabelName.setText("Name");

        jLabelDescription.setText("Description");

        jTextFieldProposedSubjectDescription.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextFieldProposedSubjectDescriptionActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Propose subject");

        jButtonProposeSubject.setText("Submit");
        jButtonProposeSubject.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonProposeSubjectActionPerformed(evt);
            }
        });

        jListProposedTeachers.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jListProposedTeachers);

        jLabelTeachers.setText("Teachers");

        javax.swing.GroupLayout jPanelAddProposedSubjectLayout = new javax.swing.GroupLayout(jPanelAddProposedSubject);
        jPanelAddProposedSubject.setLayout(jPanelAddProposedSubjectLayout);
        jPanelAddProposedSubjectLayout.setHorizontalGroup(
            jPanelAddProposedSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAddProposedSubjectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(30, 30, 30))
            .addGroup(jPanelAddProposedSubjectLayout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addGroup(jPanelAddProposedSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonProposeSubject)
                    .addGroup(jPanelAddProposedSubjectLayout.createSequentialGroup()
                        .addComponent(jLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldProposedSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAddProposedSubjectLayout.createSequentialGroup()
                        .addGroup(jPanelAddProposedSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(jLabelTeachers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelAddProposedSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldProposedSubjectDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(249, Short.MAX_VALUE))
        );
        jPanelAddProposedSubjectLayout.setVerticalGroup(
            jPanelAddProposedSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAddProposedSubjectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(34, 34, 34)
                .addGroup(jPanelAddProposedSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldProposedSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelAddProposedSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextFieldProposedSubjectDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelAddProposedSubjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTeachers, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jButtonProposeSubject)
                .addGap(20, 20, 20))
        );

        jPanelEstablishSubjects.setBackground(new java.awt.Color(255, 255, 255));
        jPanelEstablishSubjects.setMaximumSize(new java.awt.Dimension(800, 550));
        jPanelEstablishSubjects.setMinimumSize(new java.awt.Dimension(800, 550));
        jPanelEstablishSubjects.setPreferredSize(new java.awt.Dimension(800, 550));

        jTableRound2Votes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "All students", "Pool A choices", "Pool B choices", "Is in class"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTableRound2Votes);
        if (jTableRound2Votes.getColumnModel().getColumnCount() > 0)
        {
            jTableRound2Votes.getColumnModel().getColumn(0).setResizable(false);
            jTableRound2Votes.getColumnModel().getColumn(1).setResizable(false);
            jTableRound2Votes.getColumnModel().getColumn(2).setResizable(false);
            jTableRound2Votes.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Pool A");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Pool B");

        jListPoolAEstablishClasses.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListPoolAEstablishClasses.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jListPoolAEstablishClassesMouseReleased(evt);
            }
        });
        jScrollPane8.setViewportView(jListPoolAEstablishClasses);

        jListPoolBEstablishClasses.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListPoolBEstablishClasses.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jListPoolBEstablishClassesMouseReleased(evt);
            }
        });
        jScrollPane9.setViewportView(jListPoolBEstablishClasses);

        jListClasses.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jListClassesMouseReleased(evt);
            }
        });
        jScrollPane10.setViewportView(jListClasses);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Classes");

        jButtonSubmitClass.setText("Submit Class");
        jButtonSubmitClass.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSubmitClassActionPerformed(evt);
            }
        });

        jLabelNewClassError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jScrollPane11.setViewportView(jListStudentsForClass);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Sudents");

        javax.swing.GroupLayout jPanelEstablishSubjectsLayout = new javax.swing.GroupLayout(jPanelEstablishSubjects);
        jPanelEstablishSubjects.setLayout(jPanelEstablishSubjectsLayout);
        jPanelEstablishSubjectsLayout.setHorizontalGroup(
            jPanelEstablishSubjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEstablishSubjectsLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanelEstablishSubjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
                    .addGroup(jPanelEstablishSubjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanelEstablishSubjectsLayout.createSequentialGroup()
                            .addComponent(jLabelNewClassError, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                            .addComponent(jButtonSubmitClass))
                        .addGroup(jPanelEstablishSubjectsLayout.createSequentialGroup()
                            .addGroup(jPanelEstablishSubjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanelEstablishSubjectsLayout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelEstablishSubjectsLayout.createSequentialGroup()
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18)
                            .addGroup(jPanelEstablishSubjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))))
                .addGap(0, 36, Short.MAX_VALUE))
        );
        jPanelEstablishSubjectsLayout.setVerticalGroup(
            jPanelEstablishSubjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEstablishSubjectsLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelEstablishSubjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelEstablishSubjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(jScrollPane11)
                    .addComponent(jScrollPane9)
                    .addComponent(jScrollPane8))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelEstablishSubjectsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNewClassError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSubmitClass, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(16, 16, 16))
        );

        jMenuProposeSubject.setText("Propose subject");
        jMenuProposeSubject.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jMenuProposeSubjectMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuProposeSubject);

        jMenuRound1.setText("Round 1");
        jMenuRound1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jMenuRound1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuRound1);

        jMenuRound2.setText("Round 2");
        jMenuRound2.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jMenuRound2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuRound2);

        jMenuEstablishClasses.setText("Establish classes");
        jMenuEstablishClasses.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jMenuEstablishClassesMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuEstablishClasses);

        jMenuLogout.setText("Log out");
        jMenuLogout.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jMenuLogoutMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuLogout);

        jMenuHelp.setText("Help");
        jMenuHelp.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jMenuHelpMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelHelp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelChooseProposedSubjectsForRound1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelLogin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelPoll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelRound1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanelAddProposedSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelEstablishSubjects, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelHelp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelChooseProposedSubjectsForRound1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelPoll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanelRound1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanelAddProposedSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 224, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelEstablishSubjects, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void setupStudentSubjectsTable()
    {
        subjectsToBeDisplayed = control.getAllAliveProposedElectiveSubjects();
        Object[][] data = new Object[subjectsToBeDisplayed.size()][4];
        for (int i = 0; i < subjectsToBeDisplayed.size(); i++)
        {
            data[i][0] = subjectsToBeDisplayed.get(i).getName();
            data[i][1] = subjectsToBeDisplayed.get(i).getPoolOptions();
            data[i][2] = subjectsToBeDisplayed.get(i).getTeachersNames();
            data[i][3] = subjectsToBeDisplayed.get(i).getDescription();
        }
        jTableSubjects.setModel(new DefaultTableModel(data, subjectsTableColumnNames)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        });

        jTableSubjects.getColumnModel().getColumn(0).setPreferredWidth(60);
        jTableSubjects.getColumnModel().getColumn(1).setPreferredWidth(20);
        jTableSubjects.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTableSubjects.getColumnModel().getColumn(3).setPreferredWidth(140);
//        System.out.println(jTableSubjects.getColumnModel().getTotalColumnWidth());
    }

    private void setupHeadSubjectsTable()
    {
        subjectsToBeDisplayed = control.getAllProposedElectiveSubjects();
        Object[][] data = new Object[subjectsToBeDisplayed.size()][4];
        for (int i = 0; i < subjectsToBeDisplayed.size(); i++)
        {
            data[i][0] = subjectsToBeDisplayed.get(i).getName();
            data[i][1] = subjectsToBeDisplayed.get(i).getPoolOptions();
            data[i][2] = subjectsToBeDisplayed.get(i).getTeachersNames();
            data[i][3] = subjectsToBeDisplayed.get(i).getDescription();
        }
        jTableSubjects.setModel(new DefaultTableModel(data, subjectsTableColumnNames)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        });

        jTableSubjects.getColumnModel().getColumn(0).setPreferredWidth(60);
        jTableSubjects.getColumnModel().getColumn(1).setPreferredWidth(20);
        jTableSubjects.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTableSubjects.getColumnModel().getColumn(3).setPreferredWidth(140);
//        System.out.println(jTableSubjects.getColumnModel().getTotalColumnWidth());
    }
    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        if (control.authenticateUser(jTextFieldUsername.getText(), jTextFieldPassword.getText()).equals(AcceptanceProtocol.ACCOUNT_LOGIN_SUCCESS))
        {
            switch (control.getUser().getUserType().getName())
            {
                case "Teacher":
                case "Student":
                    jPanelLogin.setVisible(false);
                    jPanelMain.setVisible(true);
                    jMenuRound1.setVisible(true);
                    jMenuRound2.setVisible(true);
                    jMenuHelp.setVisible(false);
                    jMenuLogout.setVisible(true);
                    jMenuProposeSubject.setVisible(true);
                    jLabelWelcome.setText("Welcome, " + control.getUser().getName() + "!");
                    jTextFieldUsername.setText("");
                    jTextFieldPassword.setText("");
                    jButtonSelectSubjectsToVote.setVisible(false);
                    setupStudentSubjectsTable();
                    break;
                case "Head":
                    jPanelLogin.setVisible(false);
                    jPanelMain.setVisible(true);
                    jMenuRound1.setVisible(true); //to be changed when we implement user story 1
                    jMenuRound2.setVisible(true);
                    jMenuEstablishClasses.setVisible(true);
                    jMenuHelp.setVisible(false);
                    jMenuLogout.setVisible(true);
                    jLabelWelcome.setText("Welcome, " + control.getUser().getName() + "!");
                    jTextFieldUsername.setText("");
                    jTextFieldPassword.setText("");
                    jButtonSelectSubjectsToVote.setVisible(false);
                    setupHeadSubjectsTable();
                    //setupUnsatisfiedStudentsTable();
                    break;
            }

        }
        else
        {
            jLabelLoginError.setText(control.authenticateUser(jTextFieldUsername.getText(), jTextFieldPassword.getText()));
            jTextFieldUsername.setText("");
            jTextFieldPassword.setText("");
        }
    }//GEN-LAST:event_jButtonLoginActionPerformed

    private void jMenuRound1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuRound1MouseClicked
        jPanelEstablishSubjects.setVisible(false);
        switch (control.getUser().getUserType().getName())
        {
            case "Teacher":
            case "Student":
                roundNumber = 1;
                setupComboBoxItemsForRound();
                jComboBox1.setSelectedIndex(0);
                jComboBox2.setSelectedIndex(0);
                jComboBox3.setSelectedIndex(0);
                jComboBox4.setSelectedIndex(0);
                jPanelMain.setVisible(false);
                jPanelRound1.setVisible(true);
                jPanelHelp.setVisible(false);
                jPanelAddProposedSubject.setVisible(false);
                jPanelChooseProposedSubjectsForRound1.setVisible(false);
                jLabelRoundTitle.setText("Round 1");
                jLabelPollA.setVisible(false);
                jLabelPollB.setVisible(false);
                jLabelFirstPriorityA.setText("Please choose two first priorities:");
                jLabelFirstPriorityB.setVisible(false);
                jLabelSecondPriorityA.setText("Please choose two second priorities:");
                jLabelSecondPriorityB.setVisible(false);
                jLabelError.setText("");
                break;
            case "Head":
                jPanelChooseProposedSubjectsForRound1.setVisible(true);
                jPanelAddProposedSubject.setVisible(false);
                jPanelMain.setVisible(false);
                jPanelRound1.setVisible(false);
                jPanelHelp.setVisible(false);
                jPanelLogin.setVisible(false);
                jPanelPoll.setVisible(false);
                setupJListSubjectsToChooseFromForRound1();
                break;
        }
    }//GEN-LAST:event_jMenuRound1MouseClicked

    private void jMenuRound2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuRound2MouseClicked
        jPanelEstablishSubjects.setVisible(false);
        switch (control.getUser().getUserType().getName())
        {
            case "Teacher":
            case "Student":
                roundNumber = 2;
                setupComboBoxItemsForRound();
                jComboBox1.setSelectedIndex(0);
                jComboBox2.setSelectedIndex(0);
                jComboBox3.setSelectedIndex(0);
                jComboBox4.setSelectedIndex(0);
                jPanelMain.setVisible(false);
                jPanelRound1.setVisible(true);
                jPanelHelp.setVisible(false);
                jPanelChooseProposedSubjectsForRound1.setVisible(false);
                jPanelAddProposedSubject.setVisible(false);
                jLabelRoundTitle.setText("Round 2");
                jLabelPollA.setVisible(true);
                jLabelPollB.setVisible(true);
                jLabelFirstPriorityA.setText("First Priority:");
                jLabelFirstPriorityB.setVisible(true);
                jLabelSecondPriorityA.setText("Second Priority:");
                jLabelSecondPriorityB.setVisible(true);
                jLabelError.setText("");
                break;
            case "Head":
                jProgressBar1.setValue(0);
                jPanelPoll.setVisible(true);
                jPanelMain.setVisible(false);
                jPanelHelp.setVisible(false);
                jPanelChooseProposedSubjectsForRound1.setVisible(false);
                setupPollSubjects();
                break;
        }

    }//GEN-LAST:event_jMenuRound2MouseClicked

    private void jMenuHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuHelpMouseClicked
        jPanelEstablishSubjects.setVisible(false);
        jPanelMain.setVisible(false);
        jPanelRound1.setVisible(false);
        jPanelLogin.setVisible(false);
        jPanelHelp.setVisible(true);
        jPanelChooseProposedSubjectsForRound1.setVisible(false);
        jLabelLoginError.setText("");
    }//GEN-LAST:event_jMenuHelpMouseClicked

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        jPanelHelp.setVisible(false);
        jPanelLogin.setVisible(true);
        jLabelLoginError.setText("");
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jMenuLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuLogoutMouseClicked
        jPanelEstablishSubjects.setVisible(false);
        jPanelMain.setVisible(false);
        jMenuRound1.setVisible(false);
        jMenuRound2.setVisible(false);
        jMenuLogout.setVisible(false);
        jMenuHelp.setVisible(true);
        jMenuProposeSubject.setVisible(false);
        jMenuEstablishClasses.setVisible(false);
        jPanelRound1.setVisible(false);
        jPanelHelp.setVisible(false);
        jPanelLogin.setVisible(true);
        jTextFieldUsername.requestFocus();
        jPanelChooseProposedSubjectsForRound1.setVisible(false);
        jPanelAddProposedSubject.setVisible(false);
        jPanelPoll.setVisible(false);
    }//GEN-LAST:event_jMenuLogoutMouseClicked

    private void jButtonSubmitRound1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitRound1ActionPerformed
        String logMessage;
        if (jComboBox1.getSelectedIndex() > 0 && jComboBox2.getSelectedIndex() > 0
                && jComboBox3.getSelectedIndex() > 0 && jComboBox4.getSelectedIndex() > 0)
        {
            if (!jComboBox1.getSelectedItem().toString().equals(jComboBox2.getSelectedItem().toString())
                    && !jComboBox1.getSelectedItem().toString().equals(jComboBox3.getSelectedItem().toString())
                    && !jComboBox1.getSelectedItem().toString().equals(jComboBox4.getSelectedItem().toString())
                    && !jComboBox2.getSelectedItem().toString().equals(jComboBox3.getSelectedItem().toString())
                    && !jComboBox2.getSelectedItem().toString().equals(jComboBox4.getSelectedItem().toString())
                    && !jComboBox3.getSelectedItem().toString().equals(jComboBox4.getSelectedItem().toString()))
            {

                logMessage = control.addVoteFromParticularUser(jComboBox1.getSelectedItem().toString(), jComboBox2.getSelectedItem().toString(),
                        jComboBox3.getSelectedItem().toString(), jComboBox4.getSelectedItem().toString(), roundNumber);
                if (logMessage.equals(AcceptanceProtocol.VOTE_REGISTRATION_SUCCESS))
                {
                    jLabelError.setForeground(Color.GREEN);
                    jLabelError.setText("OK");
                    jComboBox1.setEnabled(false);
                    jComboBox2.setEnabled(false);
                    jComboBox3.setEnabled(false);
                    jComboBox4.setEnabled(false);
                    jButtonSubmitRound1.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "Your votes have been registered!");
                }
                else
                {
                    jLabelError.setForeground(Color.RED);
                    jLabelError.setText(logMessage);
                }
            }
            else
            {
                jLabelError.setForeground(Color.RED);
                jLabelError.setText("Options must be different!");
            }
        }
        else
        {
            jLabelError.setForeground(Color.RED);
            jLabelError.setText("Please select 2 first priorities and 2 second priorities!");
        }
    }//GEN-LAST:event_jButtonSubmitRound1ActionPerformed

    private void setupComboBoxItemsForRound()
    {
        if (roundNumber == 1)
        {
            subjectsToBeDisplayed = control.getAllAliveProposedElectiveSubjects();
            String[] comboBoxSubjects = new String[subjectsToBeDisplayed.size()];
            int poz = 0;
            Object selectedCBItem = jComboBox1.getSelectedItem();
            for (ProposedSubject sb : subjectsToBeDisplayed)
            {
                if (!jComboBox2.getSelectedItem().toString().equals(sb.getName())
                        && !jComboBox3.getSelectedItem().toString().equals(sb.getName())
                        && !jComboBox4.getSelectedItem().toString().equals(sb.getName()))
                {
                    comboBoxSubjects[poz] = sb.getName();
                    poz++;
                }
            }
            String[] comboBoxItemsV2 = new String[poz + 1];
            comboBoxItemsV2[0] = "- no subject -";
            for (int i = 0; i < poz; i++)
            {
                comboBoxItemsV2[i + 1] = comboBoxSubjects[i];
            }
            jComboBox1.setModel(new DefaultComboBoxModel(comboBoxItemsV2));
            jComboBox1.setSelectedItem(selectedCBItem);

            selectedCBItem = jComboBox2.getSelectedItem();
            comboBoxSubjects = new String[subjectsToBeDisplayed.size()];
            poz = 0;
            subjectsToBeDisplayed = control.getAllAliveProposedElectiveSubjects();
            for (ProposedSubject sb : subjectsToBeDisplayed)
            {
                if (!jComboBox1.getSelectedItem().toString().equals(sb.getName())
                        && !jComboBox3.getSelectedItem().toString().equals(sb.getName())
                        && !jComboBox4.getSelectedItem().toString().equals(sb.getName()))
                {
                    comboBoxSubjects[poz] = sb.getName();
                    poz++;
                }
            }
            comboBoxItemsV2 = new String[poz + 1];
            comboBoxItemsV2[0] = "- no subject -";
            for (int i = 0; i < poz; i++)
            {
                comboBoxItemsV2[i + 1] = comboBoxSubjects[i];
            }
            jComboBox2.setModel(new DefaultComboBoxModel(comboBoxItemsV2));
            jComboBox2.setSelectedItem(selectedCBItem);

            selectedCBItem = jComboBox3.getSelectedItem();
            comboBoxSubjects = new String[subjectsToBeDisplayed.size()];
            poz = 0;
            for (ProposedSubject sb : subjectsToBeDisplayed)
            {
                if (!jComboBox1.getSelectedItem().toString().equals(sb.getName()) && !jComboBox2.getSelectedItem().toString().equals(sb.getName()) && !jComboBox4.getSelectedItem().toString().equals(sb.getName()))
                {
                    comboBoxSubjects[poz] = sb.getName();
                    poz++;
                }
            }

            comboBoxItemsV2 = new String[poz + 1];
            comboBoxItemsV2[0] = "- no subject -";
            for (int i = 0; i < poz; i++)
            {
                comboBoxItemsV2[i + 1] = comboBoxSubjects[i];
            }
            jComboBox3.setModel(new DefaultComboBoxModel(comboBoxItemsV2));
            jComboBox3.setSelectedItem(selectedCBItem);

            selectedCBItem = jComboBox4.getSelectedItem();
            comboBoxSubjects = new String[subjectsToBeDisplayed.size()];
            poz = 0;
            for (ProposedSubject sb : subjectsToBeDisplayed)
            {
                if (!jComboBox1.getSelectedItem().toString().equals(sb.getName()) && !jComboBox2.getSelectedItem().toString().equals(sb.getName()) && !jComboBox3.getSelectedItem().toString().equals(sb.getName()))
                {
                    comboBoxSubjects[poz] = sb.getName();
                    poz++;
                }
            }
            comboBoxItemsV2 = new String[poz + 1];
            comboBoxItemsV2[0] = "- no subject -";
            for (int i = 0; i < poz; i++)
            {
                comboBoxItemsV2[i + 1] = comboBoxSubjects[i];
            }
            jComboBox4.setModel(new DefaultComboBoxModel(comboBoxItemsV2));
            jComboBox4.setSelectedItem(selectedCBItem);
        }
        else
        {
            subjectsToBeDisplayed = control.getAllAliveProposedElectiveSubjects();
            String[] comboBoxSubjects = new String[subjectsToBeDisplayed.size()];
            int poz = 0;
            Object selectedCBItem = jComboBox1.getSelectedItem();
            for (ProposedSubject sb : subjectsToBeDisplayed)
            {
                if (!jComboBox2.getSelectedItem().toString().equals(sb.getName())
                        && !jComboBox3.getSelectedItem().toString().equals(sb.getName())
                        && !jComboBox4.getSelectedItem().toString().equals(sb.getName()))
                {
                    if (sb.getPoolOptions() != null)
                    {
                        if (!(roundNumber == 2 && sb.getPoolOptions().equals("B")))
                        {
                            comboBoxSubjects[poz] = sb.getName();
                            poz++;
                        }
                    }
                }
            }
            String[] comboBoxItemsV2 = new String[poz + 1];
            comboBoxItemsV2[0] = "- no subject -";
            for (int i = 0; i < poz; i++)
            {
                comboBoxItemsV2[i + 1] = comboBoxSubjects[i];
            }
            jComboBox1.setModel(new DefaultComboBoxModel(comboBoxItemsV2));
            jComboBox1.setSelectedItem(selectedCBItem);

            selectedCBItem = jComboBox2.getSelectedItem();
            comboBoxSubjects = new String[subjectsToBeDisplayed.size()];
            poz = 0;
            subjectsToBeDisplayed = control.getAllAliveProposedElectiveSubjects();
            for (ProposedSubject sb : subjectsToBeDisplayed)
            {
                if (!jComboBox1.getSelectedItem().toString().equals(sb.getName())
                        && !jComboBox3.getSelectedItem().toString().equals(sb.getName())
                        && !jComboBox4.getSelectedItem().toString().equals(sb.getName()))
                {
                    if (sb.getPoolOptions() != null)
                    {
                        if (!(roundNumber == 2 && sb.getPoolOptions().equals("A")))
                        {
                            comboBoxSubjects[poz] = sb.getName();
                            poz++;
                        }
                    }
                }
            }
            comboBoxItemsV2 = new String[poz + 1];
            comboBoxItemsV2[0] = "- no subject -";
            for (int i = 0; i < poz; i++)
            {
                comboBoxItemsV2[i + 1] = comboBoxSubjects[i];
            }
            jComboBox2.setModel(new DefaultComboBoxModel(comboBoxItemsV2));
            jComboBox2.setSelectedItem(selectedCBItem);

            selectedCBItem = jComboBox3.getSelectedItem();
            comboBoxSubjects = new String[subjectsToBeDisplayed.size()];
            poz = 0;
            for (ProposedSubject sb : subjectsToBeDisplayed)
            {
                if (!jComboBox1.getSelectedItem().toString().equals(sb.getName()) && !jComboBox2.getSelectedItem().toString().equals(sb.getName()) && !jComboBox4.getSelectedItem().toString().equals(sb.getName()))
                {
                    if (sb.getPoolOptions() != null)
                    {
                        if (!(roundNumber == 2 && sb.getPoolOptions().equals("B")))
                        {
                            comboBoxSubjects[poz] = sb.getName();
                            poz++;
                        }
                    }
                }
            }

            comboBoxItemsV2 = new String[poz + 1];
            comboBoxItemsV2[0] = "- no subject -";
            for (int i = 0; i < poz; i++)
            {
                comboBoxItemsV2[i + 1] = comboBoxSubjects[i];
            }
            jComboBox3.setModel(new DefaultComboBoxModel(comboBoxItemsV2));
            jComboBox3.setSelectedItem(selectedCBItem);

            selectedCBItem = jComboBox4.getSelectedItem();
            comboBoxSubjects = new String[subjectsToBeDisplayed.size()];
            poz = 0;
            for (ProposedSubject sb : subjectsToBeDisplayed)
            {
                if (!jComboBox1.getSelectedItem().toString().equals(sb.getName()) && !jComboBox2.getSelectedItem().toString().equals(sb.getName()) && !jComboBox3.getSelectedItem().toString().equals(sb.getName()))
                {
                    if (sb.getPoolOptions() != null)
                    {
                        if (!(roundNumber == 2 && sb.getPoolOptions().equals("A")))
                        {
                            comboBoxSubjects[poz] = sb.getName();
                            poz++;
                        }
                    }
                }
            }
            comboBoxItemsV2 = new String[poz + 1];
            comboBoxItemsV2[0] = "- no subject -";
            for (int i = 0; i < poz; i++)
            {
                comboBoxItemsV2[i + 1] = comboBoxSubjects[i];
            }
            jComboBox4.setModel(new DefaultComboBoxModel(comboBoxItemsV2));
            jComboBox4.setSelectedItem(selectedCBItem);
        }
    }

    private void setupPollSubjects()
    {
        DefaultListModel model = new DefaultListModel();
        List<ProposedSubject> subjects = control.getAllAliveProposedElectiveSubjects();
        for (ProposedSubject ps : subjects)
        {
            model.addElement(ps.getName() + "(" + ps.getTeachersNames() + ")");
        }

        jListPollA.setModel(model);
        jListPollB.setModel(model);

        //make the lists enable the multiple selection without having to hold ctrl or shift
        ListSelectionModel selectionModel1 = new DefaultListSelectionModel()
        {
            boolean ajustando;

            @Override
            public void setSelectionInterval(int index0, int index1)
            {
                if (ajustando)
                {
                    return;
                }
                if (isSelectedIndex(index1))
                {
                    super.removeSelectionInterval(index0, index1);
                }
                else
                {
                    super.addSelectionInterval(index0, index1);
                }
                ajustando = getValueIsAdjusting();
            }

            @Override
            public void setValueIsAdjusting(boolean valueIsAdjusting)
            {
                if (!valueIsAdjusting)
                {
                    ajustando = false;
                }
                super.setValueIsAdjusting(valueIsAdjusting);
            }

        };
        ListSelectionModel selectionModel2 = new DefaultListSelectionModel()
        {
            boolean ajustando;

            @Override
            public void setSelectionInterval(int index0, int index1)
            {
                if (ajustando)
                {
                    return;
                }
                if (isSelectedIndex(index1))
                {
                    super.removeSelectionInterval(index0, index1);
                }
                else
                {
                    super.addSelectionInterval(index0, index1);
                }
                ajustando = getValueIsAdjusting();
            }

            @Override
            public void setValueIsAdjusting(boolean valueIsAdjusting)
            {
                if (!valueIsAdjusting)
                {
                    ajustando = false;
                }
                super.setValueIsAdjusting(valueIsAdjusting);
            }

        };

        jListPollA.setSelectionModel(selectionModel1);
        jListPollB.setSelectionModel(selectionModel2);

    }

    private void setupTeachersForProposedSubjects()
    {
        DefaultListModel model = new DefaultListModel();
        List<User> teachers = control.getAllTeachers();
        for (User u : teachers)
        {
            model.addElement(u.getName());
        }

        jListProposedTeachers.setModel(model);

        //make the lists enable the multiple selection without having to hold ctrl or shift
        ListSelectionModel selectionModel1 = new DefaultListSelectionModel()
        {
            boolean ajustando;

            @Override
            public void setSelectionInterval(int index0, int index1)
            {
                if (ajustando)
                {
                    return;
                }
                if (isSelectedIndex(index1))
                {
                    super.removeSelectionInterval(index0, index1);
                }
                else
                {
                    super.addSelectionInterval(index0, index1);
                }
                ajustando = getValueIsAdjusting();
            }

            @Override
            public void setValueIsAdjusting(boolean valueIsAdjusting)
            {
                if (!valueIsAdjusting)
                {
                    ajustando = false;
                }
                super.setValueIsAdjusting(valueIsAdjusting);
            }

        };

        jListProposedTeachers.setSelectionModel(selectionModel1);
    }

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox1ActionPerformed
    {//GEN-HEADEREND:event_jComboBox1ActionPerformed
        setupComboBoxItemsForRound();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox2ActionPerformed
    {//GEN-HEADEREND:event_jComboBox2ActionPerformed
        setupComboBoxItemsForRound();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox3ActionPerformed
    {//GEN-HEADEREND:event_jComboBox3ActionPerformed
        setupComboBoxItemsForRound();
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox4ActionPerformed
    {//GEN-HEADEREND:event_jComboBox4ActionPerformed
        setupComboBoxItemsForRound();
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jTextFieldPasswordKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextFieldPasswordKeyPressed
    {//GEN-HEADEREND:event_jTextFieldPasswordKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jButtonLogin.doClick();
        }
    }//GEN-LAST:event_jTextFieldPasswordKeyPressed

    private void jButtonBackRound1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonBackRound1ActionPerformed
    {//GEN-HEADEREND:event_jButtonBackRound1ActionPerformed
        jPanelMain.setVisible(true);
        jPanelRound1.setVisible(false);
        jButtonSelectSubjectsToVote.setVisible(true);
    }//GEN-LAST:event_jButtonBackRound1ActionPerformed

    private void jButtonSelectSubjectsToVoteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSelectSubjectsToVoteActionPerformed
    {//GEN-HEADEREND:event_jButtonSelectSubjectsToVoteActionPerformed
        if (roundNumber == 0)
        {
            // open some add new subject form
        }
        else
        {
            jPanelMain.setVisible(false);
            jPanelRound1.setVisible(true);
        }
    }//GEN-LAST:event_jButtonSelectSubjectsToVoteActionPerformed
    int[] selectedIndicesA;
    int[] selectedIndicesB;
    private void jListPollBValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListPollBValueChanged
        selectedIndicesA = jListPollA.getSelectedIndices();
        selectedIndicesB = jListPollB.getSelectedIndices();
    }//GEN-LAST:event_jListPollBValueChanged

    private void jListPollBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPollBMouseClicked

    }//GEN-LAST:event_jListPollBMouseClicked

    private void jListPollBMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPollBMouseReleased
        selectedIndicesA = jListPollA.getSelectedIndices();
        selectedIndicesB = jListPollB.getSelectedIndices();

        ArrayList selectedIndecesANew = new ArrayList();
        int[] selected;
        boolean found;

        for (int i = 0; i < selectedIndicesA.length; i++)
        {
            found = false;
            for (int j = 0; j < selectedIndicesB.length; j++)
            {
                if (selectedIndicesA[i] == selectedIndicesB[j])
                {
                    found = true;
                }
            }
            if (found == false)
            {
                selectedIndecesANew.add(selectedIndicesA[i]);
            }
        }
        selected = new int[selectedIndecesANew.size()];
        int k = 0;
        for (Object o : selectedIndecesANew)
        {
            selected[k] = Integer.parseInt(o.toString());
            k++;
        }
        jListPollA.setSelectedIndices(selected);
        jProgressBar1.setValue(control.getOverallSatisfaction(jListPollA.getSelectedIndices(), jListPollB.getSelectedIndices()));
        setupUnsatisfiedStudentsTable();
    }//GEN-LAST:event_jListPollBMouseReleased

    private void jTextFieldProposedSubjectDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldProposedSubjectDescriptionActionPerformed

    }//GEN-LAST:event_jTextFieldProposedSubjectDescriptionActionPerformed

    private void jButtonProposeSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProposeSubjectActionPerformed
        ProposedSubject p = new ProposedSubject(jTextFieldProposedSubjectName.getText().toString(),
                jTextFieldProposedSubjectDescription.getText().toString(), true, null);
        String message = control.addProposedSubject(p, jListProposedTeachers.getSelectedIndices());
        jTextFieldProposedSubjectName.setText("");
        jTextFieldProposedSubjectDescription.setText("");
        jLabelFeedbackChooseProposedSubjectsForRound1.setText(message);
        jListProposedTeachers.clearSelection();
        jPanelMain.setVisible(true);
        jPanelAddProposedSubject.setVisible(false);
        jPanelRound1.setVisible(false);
        jPanelHelp.setVisible(false);
        jPanelLogin.setVisible(false);
        jPanelPoll.setVisible(false);
        jPanelEstablishSubjects.setVisible(false);
        setupStudentSubjectsTable();
    }//GEN-LAST:event_jButtonProposeSubjectActionPerformed

    private void jMenuProposeSubjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuProposeSubjectMouseClicked
        jPanelAddProposedSubject.setVisible(true);
        jPanelMain.setVisible(false);
        jPanelRound1.setVisible(false);
        jPanelHelp.setVisible(false);
        jPanelLogin.setVisible(false);
        jPanelPoll.setVisible(false);
        jPanelEstablishSubjects.setVisible(false);
        setupTeachersForProposedSubjects();
    }//GEN-LAST:event_jMenuProposeSubjectMouseClicked

    private void jButtonSubmitProposedSubjectsForRound1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitProposedSubjectsForRound1ActionPerformed
        int[] indices = jListAllProposedSubjects.getSelectedIndices();
        String result = control.selectSubjectsForRound1(indices);
        JOptionPane.showMessageDialog(this, result);
    }//GEN-LAST:event_jButtonSubmitProposedSubjectsForRound1ActionPerformed

    private void jListPollAValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListPollAValueChanged
        selectedIndicesA = jListPollA.getSelectedIndices();
        selectedIndicesB = jListPollB.getSelectedIndices();
    }//GEN-LAST:event_jListPollAValueChanged

    private void jListPollAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPollAMouseClicked

    }//GEN-LAST:event_jListPollAMouseClicked

    private void jListPollAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPollAMouseReleased
        selectedIndicesA = jListPollA.getSelectedIndices();
        selectedIndicesB = jListPollB.getSelectedIndices();

        ArrayList selectedIndecesBNew = new ArrayList();
        int[] selected;
        boolean found;

        for (int i = 0; i < selectedIndicesB.length; i++)
        {
            found = false;
            for (int j = 0; j < selectedIndicesA.length; j++)
            {
                if (selectedIndicesB[i] == selectedIndicesA[j])
                {
                    found = true;
                }
            }
            if (found == false)
            {
                selectedIndecesBNew.add(selectedIndicesB[i]);
            }
        }
        selected = new int[selectedIndecesBNew.size()];
        int k = 0;
        for (Object o : selectedIndecesBNew)
        {
            selected[k] = Integer.parseInt(o.toString());
            k++;
        }
        jListPollB.setSelectedIndices(selected);
        jProgressBar1.setValue(control.getOverallSatisfaction(jListPollA.getSelectedIndices(), jListPollB.getSelectedIndices()));

        setupUnsatisfiedStudentsTable();
    }//GEN-LAST:event_jListPollAMouseReleased

    private void setupUnsatisfiedStudentsTable()
    {

        String[] unsatisfiedStudentsTableColumnNames = new String[]
        {
            "Name", "Choices", "Satisfaction"
        };
        //Unsatisfied logic
        List<User> unsatisfiedStudents = control.getAllStudentsByUnsatisfactionRate();
        Object[][] data = new Object[unsatisfiedStudents.size()][4];
        for (int i = 0; i < unsatisfiedStudents.size(); i++)
        {
            data[i][0] = unsatisfiedStudents.get(i).getName();
            data[i][1]
                    = unsatisfiedStudents.get(i).getVotesByRound(1).get(0).getProposedSubject().getName()
                    + ", " + unsatisfiedStudents.get(i).getVotesByRound(1).get(1).getProposedSubject().getName()
                    + ", " + unsatisfiedStudents.get(i).getVotesByRound(1).get(2).getProposedSubject().getName()
                    + ", " + unsatisfiedStudents.get(i).getVotesByRound(1).get(3).getProposedSubject().getName();
            data[i][2] = unsatisfiedStudents.get(i).getSatisfaction();
        }
        jTableUnsatisfiedStudents.setModel(new DefaultTableModel(data, unsatisfiedStudentsTableColumnNames)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        });

        jTableSubjects.getColumnModel().getColumn(0).setPreferredWidth(30);
        jTableSubjects.getColumnModel().getColumn(1).setPreferredWidth(120);
        jTableSubjects.getColumnModel().getColumn(2).setPreferredWidth(10);
    }

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        JOptionPane.showMessageDialog(null, control.addSubjectsToPolls(jListPollA.getSelectedIndices(), jListPollB.getSelectedIndices()));
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    private void jMenuEstablishClassesMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jMenuEstablishClassesMouseClicked
    {//GEN-HEADEREND:event_jMenuEstablishClassesMouseClicked
        jPanelEstablishSubjects.setVisible(true);
        jPanelAddProposedSubject.setVisible(false);
        jPanelRound1.setVisible(false);
        jPanelPoll.setVisible(false);
        jPanelHelp.setVisible(false);
        jPanelChooseProposedSubjectsForRound1.setVisible(false);
        jPanelMain.setVisible(false);
        //jListStudentsForClass.setModel(new DefaultListModel());
        setupRound2VotesTable();
        fillInPoolLists();
        fillInClassList();
    }//GEN-LAST:event_jMenuEstablishClassesMouseClicked
    
    private void jListPoolAEstablishClassesMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jListPoolAEstablishClassesMouseReleased
    {//GEN-HEADEREND:event_jListPoolAEstablishClassesMouseReleased
        jListPoolBEstablishClasses.clearSelection();
        jTableRound2Votes.clearSelection();
        for (int i = 0; i < jTableRound2Votes.getRowCount(); i++)
        {
            jTableRound2Votes.setValueAt(false, i, 3);
        }
        
        List<User> students = control.getAllStudents();
        for(int i = 0; i < isStudentCheckBoxEditable.size(); i++)
        {
            isStudentCheckBoxEditable.set(i, true);
        }
        for (FinalClass c : control.getAllClasses())
        {
            if (c.getSubject().getPoolOptions().equals("A"))
            {
                for (User student : control.getStudentsForClass(c))
                {
                    for (int j = 0; j < students.size(); j++)
                    {
                        if (student.equals(students.get(j)))
                        {
                            isStudentCheckBoxEditable.set(j, false);
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_jListPoolAEstablishClassesMouseReleased

    private void jListPoolBEstablishClassesMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jListPoolBEstablishClassesMouseReleased
    {//GEN-HEADEREND:event_jListPoolBEstablishClassesMouseReleased
        jListPoolAEstablishClasses.clearSelection();
        jTableRound2Votes.clearSelection();
        for (int i = 0; i < jTableRound2Votes.getRowCount(); i++)
        {
            jTableRound2Votes.setValueAt(false, i, 3);
        }
        
        List<User> students = control.getAllStudents();
        for(int i = 0; i < isStudentCheckBoxEditable.size(); i++)
        {
            isStudentCheckBoxEditable.set(i, true);
        }
        for (FinalClass c : control.getAllClasses())
        {
            if (c.getSubject().getPoolOptions().equals("B"))
            {
                for (User student : control.getStudentsForClass(c))
                {
                    for (int j = 0; j < students.size(); j++)
                    {
                        if (student.equals(students.get(j)))
                        {
                            isStudentCheckBoxEditable.set(j, false);
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_jListPoolBEstablishClassesMouseReleased

    private void jButtonSubmitClassActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSubmitClassActionPerformed
    {//GEN-HEADEREND:event_jButtonSubmitClassActionPerformed
        List<ProposedSubject> poolA = control.getSubjectsByPool("A");
        List<ProposedSubject> poolB = control.getSubjectsByPool("B");
        ProposedSubject subject = new ProposedSubject();
        List<User> students = new ArrayList();
        if (jListPoolAEstablishClasses.getSelectedIndex() == -1 && (jListPoolBEstablishClasses.getSelectedIndex() == -1))
        {
            jLabelNewClassError.setText("Please select a subject!");
        }
        else
        {
            if (jListPoolAEstablishClasses.getSelectedIndex() != -1)
            {
                subject = poolA.get(jListPoolAEstablishClasses.getSelectedIndex());
            }
            else
            {
                subject = poolB.get(jListPoolBEstablishClasses.getSelectedIndex());
            }

            for (int i = 0; i < jTableRound2Votes.getRowCount(); i++)
            {
                if (jTableRound2Votes.getValueAt(i, 3) != null)
                {
                    if ((Boolean) jTableRound2Votes.getValueAt(i, 3))
                    {
                        students.add(control.getAllStudents().get(i));
                        jTableRound2Votes.setValueAt(false, i, 3);
                        if (subject.getPoolOptions().equals("A"))
                        {
                            jTableRound2Votes.setValueAt(subject.getName() + " assinged.", i, 1);
                        }
                        else
                        {
                            jTableRound2Votes.setValueAt(subject.getName() + " assinged.", i, 2);
                        }
                    }
                }
            }
            jLabelNewClassError.setText(control.addNewClass(students, subject));
            fillInClassList();
            jListPoolAEstablishClasses.clearSelection();
            jListPoolBEstablishClasses.clearSelection();
            jTableRound2Votes.clearSelection();
        }

    }//GEN-LAST:event_jButtonSubmitClassActionPerformed

    private void jListClassesMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jListClassesMouseReleased
    {//GEN-HEADEREND:event_jListClassesMouseReleased
        if (jListClasses.getSelectedIndex() != -1)
        {
            fillInStudentForClassList();
        }
        else
        {
            jListStudentsForClass.setModel(new DefaultListModel());
        }
    }//GEN-LAST:event_jListClassesMouseReleased

    private void fillInStudentForClassList()
    {
        List<User> studentsForClass = control.getStudentsForClass(control.getAllClasses().get(jListClasses.getSelectedIndex()));
        DefaultListModel model = new DefaultListModel();
        for (User student : studentsForClass)
        {
            model.addElement(student.getName());
        }
        jListStudentsForClass.setModel(model);
    }

    private void fillInClassList()
    {
        List<FinalClass> classes = control.getAllClasses();
        DefaultListModel model = new DefaultListModel();
        for (FinalClass c : classes)
        {
            model.addElement(c.getName() + " (" + c.getStudents().size() + ")");
        }
        jListClasses.setModel(model);

    }

    private void fillInPoolLists()
    {
        List<ProposedSubject> poolA = control.getSubjectsByPool("A");
        List<ProposedSubject> poolB = control.getSubjectsByPool("B");

        DefaultListModel modelA = new DefaultListModel();
        for (ProposedSubject ps : poolA)
        {
            modelA.addElement(ps.getName());
        }
        jListPoolAEstablishClasses.setModel(modelA);

        DefaultListModel modelB = new DefaultListModel();
        for (ProposedSubject ps : poolB)
        {
            modelB.addElement(ps.getName());
        }
        jListPoolBEstablishClasses.setModel(modelB);
    }

    private void setupRound2VotesTable()
    {
        String[] round2VotesTableColoumnNames =
        {
            "Name", "Pool A choices", "Pool B choices", "Add"
        };
        List<User> allStudents = control.getAllStudents();
        Object[][] data = new Object[allStudents.size()][4];
 
        for (int i = 0; i < allStudents.size(); i++)
        {
            List<Vote> currentVotes = allStudents.get(i).getVotesByRound(2);
 
            data[i][0] = allStudents.get(i).getName();
            String error = "No votes yet.";
            if (!currentVotes.isEmpty())
            {
 
                String secondPool = "";
                String firstPool = "";
                for (Vote vote : currentVotes)
                {
 
                    if (vote.getProposedSubject().getPoolOptions().equals("A"))
                    {
                        if (vote.getPoints() == 2)
                        {
                            firstPool += "1 " + vote.getProposedSubject().getName();
                        }
                        else if (vote.getPoints() == 1)
                        {
                            firstPool += ", 2 " + vote.getProposedSubject().getName();
                        }
                        data[i][1] = firstPool;
                    } else if (vote.getProposedSubject().getPoolOptions().equals("B"))
                    {
                        if (vote.getPoints() == 2)
                        {
                            secondPool += "1 " + vote.getProposedSubject().getName();
                        }
                        else if (vote.getPoints() == 1)
                        {
                            secondPool += ", 2 " + vote.getProposedSubject().getName();
                        }
                        data[i][2] = secondPool;
                    }
                }
            }
            else
            {
                data[i][1] = error;
                data[i][2] = error;
            }
 
        }
        jTableRound2Votes.setModel(new DefaultTableModel(data, round2VotesTableColoumnNames)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                switch (column)
                {
                    case 3:
                        return isStudentCheckBoxEditable.get(row);
                    default:
                        return false;
                }
            }

            @Override
            public Class getColumnClass(int column)
            {
                switch (column)
                {
                    case 3:
                        return Boolean.class;
                    default:
                        return String.class;
                }
            }
        });

        jTableRound2Votes.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTableRound2Votes.getColumnModel().getColumn(1).setPreferredWidth(150);
        jTableRound2Votes.getColumnModel().getColumn(2).setPreferredWidth(150);
        jTableRound2Votes.getColumnModel().getColumn(3).setPreferredWidth(50);
        
        for(User s : allStudents)
        {
           isStudentCheckBoxEditable.add(true);
        }
    }

    private void setupJListSubjectsToChooseFromForRound1()
    {
        DefaultListModel model = new DefaultListModel();
        List<ProposedSubject> subjects = control.getAllProposedElectiveSubjects();
        for (ProposedSubject ps : subjects)
        {
            model.addElement(ps.getName() + " (is alive = " + ps.isIsAlive() + " )");
        }

        jListAllProposedSubjects.setModel(model);

        //make the lists enable the multiple selection without having to hold ctrl or shift       
        ListSelectionModel selectionModel1 = new DefaultListSelectionModel()
        {
            boolean ajustando;

            @Override
            public void setSelectionInterval(int index0, int index1)
            {
                if (ajustando)
                {
                    return;
                }
                if (isSelectedIndex(index1))
                {
                    super.removeSelectionInterval(index0, index1);
                }
                else
                {
                    super.addSelectionInterval(index0, index1);
                }
                ajustando = getValueIsAdjusting();
            }

            @Override
            public void setValueIsAdjusting(boolean valueIsAdjusting)
            {
                if (!valueIsAdjusting)
                {
                    ajustando = false;
                }
                super.setValueIsAdjusting(valueIsAdjusting);
            }

        };
        jListAllProposedSubjects.setSelectionModel(selectionModel1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonBackRound1;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JButton jButtonProposeSubject;
    private javax.swing.JButton jButtonSelectSubjectsToVote;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JButton jButtonSubmitClass;
    private javax.swing.JButton jButtonSubmitProposedSubjectsForRound1;
    private javax.swing.JButton jButtonSubmitRound1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelA;
    private javax.swing.JLabel jLabelB;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JLabel jLabelFeedbackChooseProposedSubjectsForRound1;
    private javax.swing.JLabel jLabelFirstPriorityA;
    private javax.swing.JLabel jLabelFirstPriorityB;
    private javax.swing.JLabel jLabelLogPool;
    private javax.swing.JLabel jLabelLoginError;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelNewClassError;
    private javax.swing.JLabel jLabelPollA;
    private javax.swing.JLabel jLabelPollB;
    private javax.swing.JLabel jLabelRoundTitle;
    private javax.swing.JLabel jLabelSecondPriorityA;
    private javax.swing.JLabel jLabelSecondPriorityB;
    private javax.swing.JLabel jLabelTeachers;
    private javax.swing.JLabel jLabelWelcome;
    private javax.swing.JList jListAllProposedSubjects;
    private javax.swing.JList jListClasses;
    private javax.swing.JList jListPollA;
    private javax.swing.JList jListPollB;
    private javax.swing.JList jListPoolAEstablishClasses;
    private javax.swing.JList jListPoolBEstablishClasses;
    private javax.swing.JList jListProposedTeachers;
    private javax.swing.JList jListStudentsForClass;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEstablishClasses;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenu jMenuLogout;
    private javax.swing.JMenu jMenuProposeSubject;
    private javax.swing.JMenu jMenuRound1;
    private javax.swing.JMenu jMenuRound2;
    private javax.swing.JPanel jPanelAddProposedSubject;
    private javax.swing.JPanel jPanelChooseProposedSubjectsForRound1;
    private javax.swing.JPanel jPanelEstablishSubjects;
    private javax.swing.JPanel jPanelHelp;
    private javax.swing.JPanel jPanelLogin;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelPoll;
    private javax.swing.JPanel jPanelRound1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTableRound2Votes;
    private javax.swing.JTable jTableSubjects;
    private javax.swing.JTable jTableUnsatisfiedStudents;
    private javax.swing.JPasswordField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldProposedSubjectDescription;
    private javax.swing.JTextField jTextFieldProposedSubjectName;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables
}
